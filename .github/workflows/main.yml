name: Main
on:
  pull_request:
    branches:
    - master
  push:
    branches:
    - master
env:
  GO111MODULE: on

jobs:

  download_go_modules:
    name: Download go modules
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download modules
      run: go mod download
      shell: bash

    - name: Pack go modules
      run: tar -czvf go_modules.tar.gz -C $HOME/go/pkg/mod .
      shell: bash

    # FIXME: https://github.community/t5/GitHub-Actions/Caching-files-between-GitHub-Action-executions/m-p/30974#M630
    - name: Upload go modules artifact
      uses: actions/upload-artifact@master
      with:
        name: go_modules
        path: go_modules.tar.gz

  build:
    name: Build
    needs: download_go_modules
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Download go modules artifact
      uses: actions/download-artifact@master
      with:
        name: go_modules
        path: .

    - name: Unpack go modules
      run: mkdir -p $HOME/go/pkg/mod && tar -xzvf go_modules.tar.gz -C $HOME/go/pkg/mod
      shell: bash

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Build
      run: go build -tags "dfrunmount dfssh" github.com/flant/werf/cmd/werf
      shell: bash

  unit_tests:
    name: Unit tests
    needs: download_go_modules
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download go modules artifact
      uses: actions/download-artifact@master
      with:
        name: go_modules
        path: .

    - name: Unpack go modules
      run: mkdir -p $HOME/go/pkg/mod && tar -xzvf go_modules.tar.gz -C $HOME/go/pkg/mod
      shell: bash

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/unit_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo ::set-env name=WERF_TEST_COVERAGE_DIR::$WERF_TEST_COVERAGE_DIR
      shell: bash

    - name: Test
      run: go test -tags "dfrunmount dfssh" -coverpkg=./... -coverprofile=$WERF_TEST_COVERAGE_DIR/coverage.out ./cmd/... ./pkg/...
      shell: bash

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  integration_tests:
    name: Integration tests
    needs: download_go_modules
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download go modules artifact
      uses: actions/download-artifact@master
      with:
        name: go_modules
        path: .

    - name: Unpack go modules
      run: mkdir -p $HOME/go/pkg/mod && tar -xzvf go_modules.tar.gz -C $HOME/go/pkg/mod
      shell: bash

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/integration_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo ::set-env name=WERF_TEST_COVERAGE_DIR::$WERF_TEST_COVERAGE_DIR

        ./scripts/ci/bats.sh
        ./scripts/ci/parallel.sh
        ./scripts/ci/git.sh

        go install github.com/onsi/ginkgo/ginkgo
        go install github.com/google/go-containerregistry/cmd/crane # bats tests
        echo "::add-path::$HOME/go/bin"

        ./scripts/tests/werf_with_coverage.sh
        echo "::add-path::$GITHUB_WORKSPACE/bin/tests"
      shell: bash

    - name: Test
      run: |
        WERF_TEST_WERF_BINARY_PATH=$GITHUB_WORKSPACE/bin/tests/werf ginkgo --tags integration -p -r integration
        WERF_TEST_K8S_DISABLED=1 bats -r $GITHUB_WORKSPACE/tests --jobs 5
      shell: bash

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  integration_k8s_tests:
    name: Integration k8s tests
    needs: download_go_modules
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        k8s_version: [1.11, 1.12, 1.13, 1.14, 1.15, 1.16]

    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download go modules artifact
      uses: actions/download-artifact@master
      with:
        name: go_modules
        path: .

    - name: Unpack go modules
      run: mkdir -p $HOME/go/pkg/mod && tar -xzvf go_modules.tar.gz -C $HOME/go/pkg/mod
      shell: bash

    - name: Prepare environment
      run: |
        export WERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/integration_k8s_tests/${{ matrix.os }}
        mkdir -p $WERF_TEST_COVERAGE_DIR
        echo ::set-env name=WERF_TEST_COVERAGE_DIR::$WERF_TEST_COVERAGE_DIR

        ./scripts/ci/git.sh

        go install github.com/onsi/ginkgo/ginkgo
        echo "::add-path::$HOME/go/bin"

        ./scripts/tests/werf_with_coverage.sh
        echo "::add-path::$GITHUB_WORKSPACE/bin/tests"

        echo ::set-env name=WERF_TEST_K8S_BASE64_KUBECONFIG::$(printenv WERF_TEST_K8S_BASE64_KUBECONFIG_$(echo ${{ matrix.k8s_version }} | tr . _))
      shell: bash
      env:
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_11: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_11 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_12: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_12 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_13: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_13 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_14: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_14 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_15: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_15 }}
        WERF_TEST_K8S_BASE64_KUBECONFIG_1_16: ${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_16 }}

    - name: Test
      run: |
        source ./scripts/ci/integration_k8s_tests_before_hook.sh
        WERF_TEST_WERF_BINARY_PATH=$GITHUB_WORKSPACE/bin/tests/werf ginkgo --tags integration_k8s -p -r integration
      shell: bash
      env:
        WERF_TEST_K8S_DOCKER_REGISTRY: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY }}
        WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME }}
        WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD: ${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD }}

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  macos_integration_tests:
    name: Integration tests (macOS-latest)
    needs: download_go_modules
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:

    - name: Test (macOS-latest)
      uses: appleboy/ssh-action@master
      with:
        command_timeout: 6h
        host: ${{ secrets.MAC_HOST }}
        username: ${{ secrets.MAC_USERNAME }}
        key: ${{ secrets.MAC_SSH_PRIVATE_KEY }}
        port: ${{ secrets.MAC_PORT }}
        script_stop: true
        envs: GITHUB_SHA,GITHUB_REF
        script: |
          set -ex

          export GITHUB_SHA=$GITHUB_SHA
          export GITHUB_REF=$GITHUB_REF

          export PATH=/usr/local/bin:$PATH
          source ~/.bash_profile

          tmp_dir=$(mktemp -d -t github_actions-)
          git clone https://github.com/flant/werf.git $tmp_dir
          cd $tmp_dir
          git fetch --tags --prune --progress --no-recurse-submodules origin +refs/heads/*:refs/remotes/origin/* +refs/pull/*/merge:refs/remotes/origin/pr/*
          git checkout --progress --force $GITHUB_SHA

          export JOB_NAME=integration_tests
          exec ./scripts/ci/integration_test_macos_runner.sh

  macos_integration_k8s_tests:
    name: Integration k8s tests (macOS-latest)
    needs: download_go_modules
    strategy:
      fail-fast: false
      matrix:
        k8s_version: [1.11, 1.12, 1.13, 1.14, 1.15, 1.16]
    runs-on: ubuntu-latest
    steps:

    - name: Test (macOS-latest)
      uses: appleboy/ssh-action@master
      with:
        command_timeout: 6h
        host: ${{ secrets.MAC_HOST }}
        username: ${{ secrets.MAC_USERNAME }}
        key: ${{ secrets.MAC_SSH_PRIVATE_KEY }}
        port: ${{ secrets.MAC_PORT }}
        script_stop: true
        envs: GITHUB_SHA,GITHUB_REF
        script: |
          set -ex

          export GITHUB_SHA=$GITHUB_SHA
          export GITHUB_REF=$GITHUB_REF

          export WERF_TEST_K8S_BASE64_KUBECONFIG_1_11=${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_11 }}
          export WERF_TEST_K8S_BASE64_KUBECONFIG_1_12=${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_12 }}
          export WERF_TEST_K8S_BASE64_KUBECONFIG_1_13=${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_13 }}
          export WERF_TEST_K8S_BASE64_KUBECONFIG_1_14=${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_14 }}
          export WERF_TEST_K8S_BASE64_KUBECONFIG_1_15=${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_15 }}
          export WERF_TEST_K8S_BASE64_KUBECONFIG_1_16=${{ secrets.WERF_TEST_K8S_BASE64_KUBECONFIG_1_16 }}

          export WERF_TEST_K8S_BASE64_KUBECONFIG=$(printenv WERF_TEST_K8S_BASE64_KUBECONFIG_$(echo ${{ matrix.k8s_version }} | tr . _))

          export WERF_TEST_K8S_DOCKER_REGISTRY=${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY }}
          export WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME=${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_USERNAME }}
          export WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD=${{ secrets.WERF_TEST_K8S_DOCKER_REGISTRY_PASSWORD }}

          export PATH=/usr/local/bin:$PATH
          source ~/.bash_profile

          tmp_dir=$(mktemp -d -t github_actions-)
          git clone https://github.com/flant/werf.git $tmp_dir
          cd $tmp_dir
          git fetch --tags --prune --progress --no-recurse-submodules origin +refs/heads/*:refs/remotes/origin/* +refs/pull/*/merge:refs/remotes/origin/pr/*
          git checkout --progress --force $GITHUB_SHA

          export JOB_NAME=integration_k8s_tests_${{ matrix.k8s_version }}
          exec ./scripts/ci/integration_test_macos_runner.sh integration_k8s

  upload_coverage:
    name: Upload coverage
    needs:
    - unit_tests
    - integration_tests
    - integration_k8s_tests
#    - macos_integration_tests
#    - macos_integration_k8s_tests
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download coverage artifact
      uses: actions/download-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

    - name: Upload
      run: |
        export WERF_TEST_COVERAGE_DIR=tests_coverage
        export GIT_BRANCH=${GITHUB_REF:11}
        export GIT_COMMIT_SHA=$GITHUB_SHA
        ./scripts/ci/codeclimate.sh
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
